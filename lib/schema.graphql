schema {
  query: Query
  mutation: Mutation
}

type Query {
  getUsers: [User]
  getAreas: [Area]
  getProjects(areaId: String!): [Project]
  getActivities(userId: String!): [Activity]
  getConversation(activityId: String!): Conversation
}

type Mutation {
  createUser(input: UserInput): User
  createArea(input: AreaInput): Area 
  createProject(input: ProjectInput): Project 
  createActivity(input: ActivityInput): Activity 
  createConversation(input: ConversationInput): Conversation 
}

input AreaInput {
  name: String!
  userId: String!
  father: String
  modifiedAt: AWSDateTime
  modifiedBy: String
  createdAt: AWSDateTime
  createdBy: String
}

input UserInput {
  name: String!
  mail: String!
  role: String! 
  passwordUpdated: Boolean
  modifiedAt: AWSDateTime
  modifiedBy: String
  createdAt: AWSDateTime
  createdBy: String
}

input ProjectInput {
  name: String!
  supportMail: String!
  areaId: String!
  modifiedAt: AWSDateTime
  modifiedBy: String
  createdAt: AWSDateTime
  createdBy: String
}

input ActivityInput {
  threadId: String!
  projectId: String!
  userId: String
  status: String! 
  type: String 
  color: String 
  criticality: String
  title: String!
  closedInternallyAt: AWSDateTime
  closedInternallyBy: String
  closedClientAt: AWSDateTime
  closedClientBy: String
  modifiedAt: AWSDateTime
  modifiedBy: String
  createdAt: AWSDateTime
  createdBy: String
}

input ConversationInput {
  activityId: String!
  text: String
  html: String!
  modifiedAt: AWSDateTime
  modifiedBy: String
  createdAt: AWSDateTime
  createdBy: String
}

type User {
  id: ID!
  name: String!
  mail: String!
  role: String! 
  passwordUpdated: Boolean
  modifiedAt: AWSDateTime
  modifiedBy: String
  createdAt: AWSDateTime
  createdBy: String
}

type Area {
  id: ID!
  name: String!
  inCharge(num: Int, after: String): UserConnection
  father(num: Int, after: String): FatherConnection
  projects(num: Int, after: String): ProjectConnection
  modifiedAt: AWSDateTime
  modifiedBy: String
  createdAt: AWSDateTime
  createdBy: String
}

type UserConnection {
  cursor: String
  user: User
}

type FatherConnection {
  cursor: String
  father: Area
}

type ProjectConnection {
  cursor: String
  projects: [Project]
}

type Project {
  id: ID!
  name: String!
  supportMail: String!
  activities(num: Int, after: String): ActivitiesConnection
  modifiedAt: AWSDateTime
  modifiedBy: String
  createdAt: AWSDateTime
  createdBy: String
}

type ActivitiesConnection {
  cursor: String
  activities: [Activity]
}

type Activity {
  id: ID!
  threadId: String!
  title: String!
  status: String! 
  type: String! 
  color: String! 
  criticality: String! 
  assigned(num: Int, after: String): UserConnection
  conversation(num: Int, after: String): ConversationConnection
  closedInternallyAt: AWSDateTime
  closedInternallyBy: String
  closedClientAt: AWSDateTime
  closedClientBy: String
  modifiedAt: AWSDateTime
  modifiedBy: String
  createdAt: AWSDateTime
  createdBy: String
}

type ConversationConnection {
  cursor: String
  conversation: Conversation
}

type Conversation {
  id: ID!
  text: String
  html: String
  modifiedAt: AWSDateTime
  modifiedBy: String
  createdAt: AWSDateTime
  createdBy: String
}